}
#store the birthday introduction and print it out
my.birth.intro <- MakeBirthdayIntro(my.name, my.age, as.Date("11/17/2018","%m/%d/%Y"))
print(my.birth.intro)
my.birth.intro <- MakeBirthdayIntro(my.name, my.age, as.Date("2018-17-11"))
print(my.birth.intro)
#store the birthday introduction and print it out
my.birth.intro <- MakeBirthdayIntro(my.name, my.age, as.Date("2018-11-17"))
print(my.birth.intro)
# Create a `colors` vector
colors <- c('red', 'green', 'blue', 'yellow', 'purple')
# Retrieve values in positions 2 through 5
colors[2:5]  # [1] "green"  "blue"   "yellow" "purple"
colors[-1]
# Create a vector of shoe sizes
shoe.sizes <- c(7, 6.5, 4, 11, 8)
# Create a boolean vector that indicates if a shoe size is greater than 6.5
shoe.is.big <- shoe.sizes > 6.5  # T, F, F, T, T
# Use the `shoe.is.big` vector to select large shoes
big.shoes <- shoe.sizes[shoe.is.big]  # returns 7, 11, 8
big.shoes <- shoe.is.big
big.shoes
big.shoes
big.shoes <- shoe.sizes[shoe.is.big]
# Create a vector of shoe sizes
shoe.sizes <- c(7, 6.5, 4, 11, 8)
# Create a boolean vector that indicates if a shoe size is greater than 6.5
shoe.is.big <- shoe.sizes > 6.5  # T, F, F, T, T
# Use the `shoe.is.big` vector to select large shoes
big.shoes <- shoe.sizes[shoe.is.big]  # returns 7, 11, 8
print(big.shoes)
big.shoes <- shoe.is.big
print(big.shoes)
# Create a vector of shoe sizes
shoe.sizes <- c(7, 6.5, 4, 11, 8)
# Select shoe sizes that are greater than 6.5
shoe.sizes[shoe.sizes > 6.5]  # returns 7, 11, 8
shoe.sizes > 6.5
#make an introduction sentence with name, age, days until next birthday
#input is name, age and birthday in 2018
#output would be a sentence ""Hello, my name is {NAME} and I'm {AGE} years old. In {N} days I'll be {NEW.AGE}"
MakeBirthdayIntro <- function(name, age, day) {
day.diff <- day - today.date
#if the day has already passed today, caculate the difference to birthday in 2019
if(day.diff < 0){
day.diff <- 365 + day.diff
}
intro <- paste(MakeIntroduction(name,age),"In", day.diff,"days I'll be", age+1)
}
#store the birthday introduction and print it out
my.birth.intro <- MakeBirthdayIntro(my.name, my.age, as.Date("11/17/2018","%m/%d/%Y"))
print(my.birth.intro)
nchar(my.birth.intro)
length(my.birth.intro)
person <- list(first.name = "Bob", last.name = "Wong", salary = 77000, in.union = TRUE)
person[["first.name"]]  # [1] "Bob"
person[["salary"]]  # [1] 77000
name.to.use <- "last.name"  # choose name (i.e., based on formality)
person[[name.to.use]]  # [1] "Wong"
name.to.use <- "first.name"  # change name to use
person[[name.to.use]]  # [1] "Bob"
person[[last.name]]
person[["last.name"]]
# SINGLE brackets returns a list
my.list[1]
# [[1]]
# [1] "A"
# DOUBLE brackets returns a vector
my.list[[1]]  # [1] "A"
my.list[[1]]
my.list <- list('A', 201, TRUE, 'rhinoceros')
my.list[[1]]
my.list[1]
my.list[1:3]
my.list[[1:3]]
my.list <- list('A', 201, TRUE, 'rhinoceros')
# SINGLE brackets returns a list
my.list[1]
# [[1]]
# [1] "A"
# DOUBLE brackets returns a vector
my.list[[1]]  # [1] "A"
my.list[[1:3]]
my.list[[1,3]]
my.list[[1:2]]
my.list[[1:4]]
# apply the `toupper()` function to each element in `people`
people.upper <- lapply(people, toupper)
# [[1]]
# [1] "SARAH"
#
# [[2]]
# [1] "AMIT"
#
# [[3]]
# [1] "ZHANG"
# apply the `paste()` function to each element in `people`,
# with an addition argument `"dances!"` to each call
dance.party <- lapply(people, paste, "dances!")
# list, not a vector
people <- list("Sarah", "Amit", "Zhang")
dance.party <- lapply(people, paste, "dances!")
dance.party
# A function that prepends "Hello" to any item
Greet <- function(item) {
return(paste("Hello", item))
}
# a list of people
people <- list("Sarah", "Amit", "Zhang")
# greet each name
greetings <- lapply(people, Greet)
greetings
greetings <- lapply(Greet, people)
greetings <- lapply(Greet, people)
greetings <- lapply(peopl, greet)
greetings <- lapply(peopl, Greet)
# greet each name
greetings <- lapply(people, Greet)
# Using the same weights/heights as above:
my.data <- data.frame(height, weight)
# Retrieve weights (the `weight` element of the list: a vector!)
my.weights <- my.data$weight
# Retrieve heights (the whole column: a vector!)
my.heights <- my.data[['height']]
my.data <- data.frame(height, weight)
# vector of names
name <- c('Ada','Bob','Chris','Diya','Emma')
# Vector of heights
height <- 58:62
# Vector of weights
weight <- c(115, 117, 120, 123, 126)
# Combine the vectors into a data.frame
# Note the names of the variables become the names of the columns!
my.data <- data.frame(name, height, weight, stringsAsFactors=FALSE)
# Using the same weights/heights as above:
my.data <- data.frame(height, weight)
# Retrieve weights (the `weight` element of the list: a vector!)
my.weights <- my.data$weight
# Retrieve heights (the whole column: a vector!)
my.heights <- my.data[['height']]
my.heights <- my.data[['height']]
my.heights
my.heights <- my.data$height
my.heights
my.heights <- my.data$height
my.heights
# Retrieve weights (the `weight` element of the list: a vector!)
my.weights <- my.data$weight
my.weights
# Start with a character vector of shirt sizes
shirt.sizes <- c('small', 'medium', 'small', 'large', 'medium', 'large')
# Convert to a vector of factor data
shirt.sizes.factor <- as.factor(shirt.sizes)
# View the factor and its levels
print(shirt.sizes.factor)
# The length of the factor is still the length of the vector, not the number of levels
length(shirt.sizes.factor)  # 6
print(shirt.sizes.factor)
shirt.sizes.factor <- as.factor(shirt.sizes)
Vector of shirt sizes
shirt.size <- c('small', 'medium', 'small', 'large', 'medium', 'large')
# Vector of costs (in dollars)
cost <- c(15.5, 17, 17, 14, 12, 23)
# Data frame of inventory (with factors, since didn't say otherwise)
shirts.factor <- data.frame(shirt.size, cost)
# The shirt.size column is a factor
is.factor(shirts.factor$shirt.size)  # TRUE
# Can treat this as a vector; but better to fix how the data is loaded
as.vector(shirts.factor$shirt.size)  # a vector
# Data frame of orders (without factoring)
shirts <- data.frame(shirt.size, cost, stringsAsFactors=FALSE)
# The shirt.size column is NOT a factor
is.factor(shirts$shirt.size)  # FALSE
# Data frame of orders (without factoring)
shirts <- data.frame(shirt.size, cost, stringsAsFactors=FALSE)
shirts
shirts <- data.frame(shirt.size, cost, stringsAsFactors=FALSE)
shirts <- data.frame(shirt.size, cost, stringsAsFactors=FALSE)
shirts
# Vector of shirt sizes
shirt.size <- c('small', 'medium', 'small', 'large', 'medium', 'large')
# Vector of costs (in dollars)
cost <- c(15.5, 17, 17, 14, 12, 23)
# Data frame of inventory (with factors, since didn't say otherwise)
shirts.factor <- data.frame(shirt.size, cost)
shirts.factor
is.factor(shirts.factor$shirt.size)
as.vector(shirts.factor$shirt.size)
shirts <- data.frame(shirt.size, cost, stringsAsFactors=FALSE)
shirts
is.factor(shirts$shirt.size)
shirt.size <- c('small', 'medium', 'small', 'large', 'medium', 'large')
cost <- c(15.5, 17, 17, 14, 12, 23)
# Data frame of inventory (with factors)
shirts.factor <- data.frame(shirt.size, cost)
# Produce a list of data frames, one for each factor level
# first argument is the data frame to split, second is the factor to split by
shirt.size.frames <- split(shirts.factor, shirts.factor$shirt.size)
shirts.factor <- data.frame(shirt.size, cost)
shirts.factor
shirt.size.frames <- split(shirts.factor, shirts.factor$shirt.size)
shirt.size.frames
tapply(shirts$cost, shirts$shirt.size, mean)
life.expectancy <- read.csv(life_expectancy.csv, stringsAsFactors = FALSE)
life.expectancy <- read.csv("life_expectancy.csv", stringsAsFactors = FALSE)
my.data <- read.csv('my_file.csv', stringsAsFactors=FALSE)
#Create a vector 'names' with the names of 6 TAs
names <- c("Adele, Anirudh, Zhanna, Tejveer, Bao, Iris")
#Create a vector math.grades with 6 hypothetical grades
math.grades <- c(22, 44, 66, 88, 99, 100)
#Create a vector spanish.grades with 6 hypothetical grades
spanish.grades <- c(77, 88, 70, 80, 90, 92)
tas <- data.frame(names, math.grades, spanish.grades, stringsAsFactors = FALSE)
tas
#Create a vector 'names' with the names of 6 TAs
names <- c("Adele", "Anirudh", "Zhanna", "Tejveer", "Bao", "Iris")
#Create a vector math.grades with 6 hypothetical grades
math.grades <- c(22, 44, 66, 88, 99, 100)
#Create a vector spanish.grades with 6 hypothetical grades
spanish.grades <- c(77, 88, 70, 80, 90, 92)
tas <- data.frame(names, math.grades, spanish.grades, stringsAsFactors = FALSE)
tas
#Create a vector 'names' with the names of 6 TAs
names <- c("Adele", "Anirudh", "Zhanna", "Tejveer", "Bao", "Iris")
#Create a vector math.grades with 6 hypothetical grades
math.grades <- c(22, 44, 66, 88, 99, 100)
#Create a vector spanish.grades with 6 hypothetical grades
spanish.grades <- c(11, 33, 55, 77, 99, 100)
tas <- data.frame(names, math.grades, spanish.grades, stringsAsFactors = FALSE)
tas
# Using the same weights/heights as above:
my.data <- data.frame(name, height, weight)
# A vector of new column names
new.col.names <- c('first.name','how.tall','how.heavy')
# Assign that vector to be the vector of column names
colnames(my.data) <- new.col.names
X <- length(names)
X
Y <- length(math.grades)
Y
Y <- length(tas)
Y <- length(tas)
Y
COL_NAMES <- paste("The TA data frame has" ,x, "rows and" ,y, "cols: COL_NAMES")
X <- length(names)
Y <- length(tas)
COL_NAMES <- paste("The TA data frame has" ,X, "rows and" ,Y, "cols: COL_NAMES")
COL_NAMES
COL_NAMES <- paste("The TA data frame has" ,X, "rows and" ,Y, "cols:" ,COL_NAMES,)
COL_NAMES <- paste("The TA data frame has" ,X, "rows and" ,Y, "cols: COL_NAMES")
COL_NAMES
COL_NAMES <- c(names, math.grades, spanish.grades)
paste("The TA data frame has" ,X, "rows and" ,Y, "cols:" ,COL_NAMES,)
View(Titanic)
is.data.frame(Titanic)
Titanic <- data.frame(Titanic, stringsAsFactors=FALSE)
Titanic
Children <- rownames(Titanic, Age$Child)
Children
Children <- rownames(Titanic$Class, Titanic$Age)
Children <- rownames( , Titanic$Age)
Children <- rownames(Titanic, Titanic$Age)
Children
Children <- rownames(Titanic$Age)
Children
children <- row.names(Titanic$Age)
children
children <- Titanic[Titanic$Age$Child]
children <- Titanic[Titanic$Age]
children
library(dplyr)
X <- nrow(tas)
Y <- ncol(tas)
children <- Titanic[1:32, "Child"]
children
children <- Titanic[1:32, "Class"]
children
install.packages("dplyr")
library("dplyr")
Titanic
children <- filter(Titanic, Age$Child)
children <- filter(Titanic, Age)
children <- filter(Titanic, "Age$Child")
children <- filter(Titanic, Titanic$Age)
children <- filter(Age)
children <- filter(Titanic, Age>= children)
children <- filter(Titanic, Age$children)
children <- filter(Titanic, Age=children)
children <- filter(Titanic, Age==children)
children <- filter(Titanic, Age==child)
children <- filter(Titanic, Age)
install.packages("nycflights13")
library("nycflights13")
View(head(nycflights13))
View(head("nycflights13"))
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# The data.frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
rownames(flights)
flights <- mutate(flights, gain = arr_delay = dep_delay)
flights <- mutate(flights, gain = arr_delay - dep_delay)
ncol(flights)
flights <- arrange(flights, desc(gain))
View(head(flights))
flights <- (flights %>% mutate(gain = arr_delay - dep_delay) %>% arrange(desc(gain))
flights <- (flights %>% mutate(gain = arr_delay - dep_delay) %>% arrange(desc(gain)))
flights
“install.packages("ggplot2")  # once per machine
library("ggplot2")”
“install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
geom_point(mapping = aes(x = displ, y = hwy) color = "blue")
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_line(mapping = aes(x = displ, y = hwy))
# Bar Chart
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy)), se=FALSE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy), se=FALSE)
install.packages("shiny")
library("shiny")
library("ggplot2")
library("dplyr")
library("dplyr")
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat`
# columns (of the ENTIRE diamonds dataset)
price.range <- range(diamonds$price)
price.range
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
carat.range <- range(diamonds$carat)
# Use the filtered data set to create a ggplot2 scatter plot with the carat
# on the x-axis, the price on the y-axis, and color based on the clarity.
# Facet the plot based on which feature the user selected to "facet by"
#   (hint: you can just pass that string directly to `facet_wrap()`)
# Save your plot as a variable.
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
p <- ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
runApp('Desktop/Info201/Practice/ch16-shiny/exercise-3')
shiny::runApp('Desktop/Info201/Homework/a7-data-app-YungTC22')
# New Names Data
nnames.data <- gather(new.names,
key= all.years,
value= emission,
"1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006",
"2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014"
)
library("maptools")
library("maptools")
gpclibPermit()
install.packages("gplib")
gpclibPermit()
setwd("~/Desktop/Info201/Homework/a7-data-app-YungTC22")
library("stats")
library("dplyr")
library("tidyr")
library("maps")
library("ggplot2")
library("shiny")
source("spatial_utils.R")
# Data.View 1 = Table
world.emissions <- read.csv("data/WDI_emissions_Data.csv", stringsAsFactors = FALSE)
world.information <- read.csv("data/WDI_emissions_Definition and Source.csv", stringsAsFactors = FALSE)
## Getting Indicator Names
indicator.name <- filter(world.information[1:2])
colnames(indicator.name) <- c("Series.Code", "Indicator.Name")
## Type in specific ISO3 to get Data About C02 Emissions
world.data <- (world.emissions %>%
na.omit() %>%
filter(Series.Code == Series.Code)) %>%
select(Country.Code, Series.Code, YR1999, YR2000, YR2001, YR2002, YR2003, YR2004, YR2005, YR2006,
YR2007, YR2008, YR2009, YR2010, YR2011, YR2012, YR2013, YR2014, Most_Recent)
# Data.View 2 = Map Visualization
## Extracting World Data
world <- map_data("world")
world <- world[world$region != "Antarctica",]
world$Country.Code <- iso.alpha(world$region, n=3)
## Joining Two Data-Sets (global.data does NOT include Indicator.Names)
global.data <- inner_join(world, world.data, by = "Country.Code")
global.datas <- inner_join(global.data, indicator.name, by = "Series.Code")
## Creating New Names
new.names <- global.data[1:24]
colnames(new.names) <- c("long", "lat", "group", "order", "region", "subregion", "Country.Code", "Series.Code",
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014)
View(global.datas)
## New Global Data Set (Contains Indicator.Names)
nglobal.data <- gather(global.datas,
key= all.years,
value= emission,
YR1999, YR2000, YR2001, YR2002, YR2003, YR2004, YR2005, YR2006,
YR2007, YR2008, YR2009, YR2010, YR2011, YR2012, YR2013, YR2014
)
## New Names Data.Frame
nnames.data <- gather(new.names,
key= all.years,
value= emission,
"1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006",
"2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014"
)
## Spreading Out Data
nnames.wide <- spread(nnames.data, key = Series.Code, value = emission)
## The Ranges of Years
years.range <- range(nnames.wide$all.years)
years.range <- as.numeric(as.character(years.range))
View(years.range)
setwd("~/Desktop/Info201/Final_Project/deaths-in-US-cities")
library("dplyr")
library("maps")
library("tidyr")
library("sp")
library("shiny")
library("ggplot2")
# Reading in data files
deaths <- read.csv('data/Deaths_in_122_US_cities.csv', stringsAsFactors = FALSE, fileEncoding = "UTF-8-BOM")
population <- read.csv('data/population_info.csv', stringsAsFactors = FALSE)
# Creating a new dataframe with the needed columns for analysis.
pneumonia.vs.all <- deaths %>% select(Year, WEEK, City, Pneumonia.and.Influenza.Deaths, All.Deaths) %>%
filter(Year > 2009)
# Getting the city names
cities <- (unique(pneumonia.vs.all$City))
# Changing of column name called "NAME" to "City" to help innerjoin the two dataframes (deaths & population)"
colnames(population)[9] <- "City"
colnames(population)[13:19] <- 2010:2016
estimate.long <- gather(population,
key = Year,
value = ESTIMATE, "2010", "2011", "2012",
"2013", "2014", "2015", "2016")
estimates <- estimate.long %>% select(Year, City, STNAME, ESTIMATE)
# Making a new dataframe that joins by city
city.join <- inner_join(pneumonia.vs.all, estimate.long, by = "City")
deaths.2010 <- filter(pneumonia.vs.all, Year == 2010)
deaths.2011 <- filter(pneumonia.vs.all, Year == 2011)
deaths.2012 <- filter(pneumonia.vs.all, Year == 2012)
deaths.2013 <- filter(pneumonia.vs.all, Year == 2013)
deaths.2014 <- filter(pneumonia.vs.all, Year == 2014)
deaths.2015 <- filter(pneumonia.vs.all, Year == 2015)
deaths.2016 <- filter(pneumonia.vs.all, Year == 2016)
#2010
max.2010 <- deaths.2010 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2010 <- deaths.2010 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2010 <- full_join(max.2010, min.2010)
# 2011
max.2011 <- deaths.2011 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2011 <- deaths.2011 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2011 <- full_join(max.2011, min.2011)
# 2012
max.2012 <- deaths.2012 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2012 <- deaths.2012 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2012 <- full_join(max.2012, min.2012)
# 2013
max.2013 <- deaths.2013 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2013 <- deaths.2013 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2013 <- full_join(max.2013, min.2013)
# 2014
max.2014 <- deaths.2014 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2014 <- deaths.2014 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2014 <- full_join(max.2014, min.2014)
# 2015
max.2015 <- deaths.2015 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2015 <- deaths.2015 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2015 <- full_join(max.2015, min.2015)
# 2016
max.2016 <- deaths.2016 %>% filter(All.Deaths == max(All.Deaths, na.rm = TRUE))
min.2016 <- deaths.2016 %>% filter(All.Deaths == min(All.Deaths, na.rm = TRUE))
maxmin.2016 <- full_join(max.2016, min.2016)
age.groups <- deaths %>% filter(Year > 2009) %>% group_by(Year)
colnames(age.groups)[9:13] <- c("<1", "1-24", "25-44", "45-64", "65+")
View(age.groups)
age.group <- gather(age.groups,
key = age.group,
value = agegroup.deaths, "<1", "1-24", "25-44", "45-64", "65+")
View(age.group)
